server:
  port: 8211
spring:
  datasource:
    name: springboot
    type: com.alibaba.druid.pool.DruidDataSource
    #druid相关配置
    druid:
      #监控统计拦截的filters
      filter: stat
      #mysql驱动
      driver-class-name: com.mysql.jdbc.Driver
      #基本属性
      url: jdbc:mysql://192.168.2.63:3306/orderDb?characterEncoding=utf-8&useSSL=false
      username: root
      password: 123456
      #配置初始化大小/最小/最大
      initial-size: 10
      min-idle: 10
      max-active: 1000
      #获取连接等待超时时间
      max-wait: 60000
      #间隔多久进行一次检测，检测需要关闭的空闲连接
      time-between-eviction-runs-millis: 60000
  redis:
    database: 0
    host: 192.168.2.63
    password: 123456
    port: 6379
    timeout: 1000
    maxActive: 1000
    maxWait: 100
    maxIdle: 500
    minIdle: 0
  resources:
    add-mappings: true
#    cache-period: 3600
    cache:
      period: 30
    chain:
      cache:  true
      enabled: true
      compressed: true
      html-application-cache: true
#    static-locations: classpath:/static/
#     配置静态资源 由于要结合 拦截器 所以放弃上一行的配置
    static-locations: classpath:/
#  mvc:
#    static-path-pattern: /static/**
#mybatis配置


mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.huang.order.domain
  configuration:
    # 使用jdbc的getGeneratedKeys 可以获取数据库自增主键值
    use-generated-keys: true
    # 使用列别名替换列名，默认true。如：select name as title from table
    use-column-label: true
    # 开启驼峰命名转换，如：Table(create_time) -> Entity(createTime)。不需要我们关心怎么进行字段匹配，mybatis会自动识别`大写字母与下划线`
    map-underscore-to-camel-case: true

#logging:
#  pattern:
##    配置日志格式 %d日期 %msg信息 %n换行
#    console: "%d - %msg%n"
##    配置文件输出位置
#  file: "D:/work/order_log/test.log"
##    指定某个类的日志级别
#  level:
#    com.huang.order.LoggerTest: error